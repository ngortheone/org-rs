* Contributing
  
  The project is currently in early development stage. All the effort is focused on
  the core functionality which is the parser - element crate.

  Resources that are especially useful:
  - Elisp source [[https://code.orgmode.org/bzg/org-mode/src/master/lisp/org-element.el][org-element.el]]
  - [[https://orgmode.org/worg/dev/org-element-api.html][Org Element API]]
  - [[https://orgmode.org/worg/dev/org-syntax.html][Org Syntax]]


** Coding guide

   Since a decision was made to closely follow original algorithm the code may not
   look very idiomatic. That is fine for now. 

   We are focused on the `Make it work. Make it right` part. Everything else will
   come later. Nevertheless some code hygiene must be enforced to ensure that this
   "later" will happen:
    - Keep the same code structure as original implementation. To make validation
      process easier try not to create functions and variables that original
      implementation does not have. Though reasonable exceptions are allowed.
    - Try to keep original function names, `org-{component}` prefix can be dropped as
      rust does not suffer from lack of lexical scoping.
    - Document all the things!
    - To make comparison between original and zorg-mode easier add links to file
      and line position from https://code.orgmode.org/bzg/org-mode/src/master/lisp
      in function's docs where possible.
    - Try to leverage Rust powers where possible without deviating from original
 

** Tips, advice, gotchas

   This is a collection of useful tips for writing zorg-mode, reading elisp code
   etc.
   
   Using Emacs is handy to get elisp code navigation and quick documentation
   access. I usually have it open next to my main editor.
   
   Matching original behavior is primary goal.
   
   You can use Emacs' [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Lisp-Eval.html][eval]]
   functionality to manually invoke `(org-element-parse-buffer)` to get the
   original Parse Tree so it can be compared with zorg-mode


   *save-excursion* - remembers current cursor position, executes body and 
   restores cursor to original position.

   In the code represented by:

   #+BEGIN_SRC rust
   fn some_fn() {
   let pos = self.cursor.pos();
   // ... body of the function
   self.cursor.set(pos);
   // possibly return
   }
   #+END_SRC 

**** Vocabulary

     *structure* - in org codebase depending on context means one of two things:
     - [[rust/element/src/lis][ListStruct]] - sort of an AST, and intermediate list
       structure representation that is shared by PlainList element itself and all of
       its items - [[https://code.orgmode.org/bzg/org-mode/src/master/lisp/org-element.el#L4348][example]]
     - Parse Tree. Whole, or part of it - [[https://code.orgmode.org/bzg/org-mode/src/master/lisp/org-element.el#L4072][example]]

     *CAR/CDR* - head and tail of the list

     *plist/alist* - [[https://www.emacswiki.org/emacs/AlistVsPlist][AlistVsPlist]]. In Org-rs these are mostly represented as structs or 
     as maps(rarely)


** Things Out of Scope

- *Incremental parsing* For the time being complete buffer re-parsing is the only
   way to update the parse tree. Incremental parsing is planned and will be added
   once core of the parsing algorithm is finished

- *Visibility* is not supported. Thinking whether current char/line is visible 
   or not is a problem of a front-end. 

- *Affiliated keywords can't have objects*. This one might go away if the 
  underlying problem is resolved. See ~collect_affiliated_keywords~ docstring 
  for details. As of now I decided to focus on more important things.

- *table.el style tables are not supported*. Original parser implementation
  supports tables from a third-party module. Those tables have more complicated
  encoding, which makes parsing them slow and prone to false-positives. Org-native tables
  are much simpler to parse and supporting an out-of-scope table implementation seems
  like a not reasonable time investment for now.

- *Inlinetasks* are not supported. Inlinetasks exist in emacs purely for reason of 
  evading folding/cycling mechanisms. A user has to define a minimum level of headline that will
  be treated as inlinetask. Org-rs is a parser and it is not concerned with representation
  of the elements. So the reason is basically the same as for visibility. Frontends are
  free to treat some headlines as inlinetasks if they want to.

